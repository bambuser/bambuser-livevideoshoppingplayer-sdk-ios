// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BambuserLiveVideoShoppingPlayer
import AVFoundation
@_exported import BambuserLiveVideoShoppingPlayer

import Combine
import EventKit
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public class AudioSessionConfiguration {
  public init(configuration: @escaping BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration.Configuration)
  public typealias Configuration = (AVFAudio.AVAudioSession) -> Swift.Void
  final public let configuration: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration.Configuration
  @objc deinit
}
extension BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration {
  public static var standard: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration {
    get
  }
}
public enum PlayerOverlayVisiblity : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case visible, hidden
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CalendarEvent : Swift.Codable, Swift.Equatable {
  public init(title: Swift.String, startDate: Foundation.Date, endDate: Foundation.Date, url: Foundation.URL)
  public let title: Swift.String
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let url: Foundation.URL
  public typealias AddToCalendarCompletion = (BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarResult) -> Swift.Void
  public typealias AddToCalendarResult = Swift.Result<Swift.Void, BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarError>
  public typealias CalendarPicker = (EventKit.EKEventStore) -> EventKit.EKCalendar?
  public typealias StorePicker = () -> EventKit.EKEventStore
  public enum AddToCalendarError : Swift.Error {
    case calendarAccessNotGranted
    case defaultCalendarNotFound
    case error(Swift.Error)
  }
  public func saveToCalendar(_ calendar: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.CalendarPicker = { $0.defaultCalendarForNewEvents }, in store: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.StorePicker = { EKEventStore() }, completion: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarCompletion)
  public static func == (a: BambuserLiveVideoShoppingPlayer.CalendarEvent, b: BambuserLiveVideoShoppingPlayer.CalendarEvent) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PlayerFunction : Swift.Codable, Swift.Equatable {
  case hideUI(sections: BambuserLiveVideoShoppingPlayer.PlayerUISections = .allHidden)
  case showUI
  case named(Swift.String, args: [Swift.String])
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerFunction, b: BambuserLiveVideoShoppingPlayer.PlayerFunction) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.0, *)
public class LiveVideoShoppingPlayerContext : Combine.ObservableObject {
  public init()
  public static let shared: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext
  public var player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView? {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct PlayerUIConfiguration : Swift.Codable, Swift.Equatable {
  public init(actionBar: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, cartView: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, cartButton: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, chatOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, emojiOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, productList: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, productView: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, shareButton: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .hidden, subscribeButton: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .hidden)
  public let actionBar: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let cartView: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let cartButton: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let chatOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let emojiOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let productList: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let productView: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let shareButton: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration, b: BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration {
  public static let standard: BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration
}
public struct PlayerLocaleInfo : Swift.Codable, Swift.Equatable {
  public init(locale: Swift.String? = nil, currency: Swift.String? = nil, trimPriceTrailingZeros: Swift.Bool = false)
  public let currency: Swift.String?
  public let locale: Swift.String?
  public let trimPriceTrailingZeros: Swift.Bool
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo, b: BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo {
  public static let standard: BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo
}
public struct PlayerUISections : Swift.Codable, Swift.Equatable {
  public init(actionBarButtons: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, chatForm: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, chatMessages: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, emojis: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, endedCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, highlightedProduct: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, loadingCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, logo: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, modalContainer: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, notAvailableCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, pausedCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, pendingCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, productListOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, replayUnavailableCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, showStatus: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, timeline: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, unmuteOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible, viewerCounter: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity = .visible)
  public let actionBarButtons: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let chatForm: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let chatMessages: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let emojis: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let endedCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let highlightedProduct: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let loadingCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let logo: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let modalContainer: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let notAvailableCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let pausedCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let pendingCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let productListOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let replayUnavailableCurtain: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let showStatus: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let timeline: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let unmuteOverlay: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public let viewerCounter: BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerUISections, b: BambuserLiveVideoShoppingPlayer.PlayerUISections) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PlayerUISections {
  public static let allHidden: BambuserLiveVideoShoppingPlayer.PlayerUISections
}
public struct Product {
  public var id: Swift.String
  public var productReference: Swift.String
  public var url: Foundation.URL
  public init?(info: [Swift.String : Any]?)
  public static func getProducts(_ info: BambuserLiveVideoShoppingPlayer.PlayerEventInfo) -> [BambuserLiveVideoShoppingPlayer.Product]
}
public struct PlayerShareConfiguration : Swift.Codable, Swift.Equatable {
  public init(autoplay: BambuserLiveVideoShoppingPlayer.PlayerEnabledState = .enabled, baseUrl: Swift.String? = nil)
  public let autoplay: BambuserLiveVideoShoppingPlayer.PlayerEnabledState
  public let baseUrl: Swift.String?
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration, b: BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration {
  public static let standard: BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration
}
public enum PlayerEnabledState : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case enabled, disabled
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerEnabledState]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerEnabledState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum PlayerEngine : Swift.Equatable, Swift.Codable {
  case standard
  case client(Swift.String)
  case custom(url: Swift.String)
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerEngine, b: BambuserLiveVideoShoppingPlayer.PlayerEngine) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ShowPresenter {
  var showId: Swift.String { get }
  func loadShow()
  func loadShow(_ showId: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LiveVideoShoppingPlayerView : UIKit.UIView, BambuserLiveVideoShoppingPlayer.PictureInPictureController, BambuserLiveVideoShoppingPlayer.ShowPresenter {
  @_Concurrency.MainActor(unsafe) convenience public init(showId: Swift.String, configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration)
  @objc deinit
  public typealias PlayerFunctionCompletion = (Swift.Result<Any?, Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public let configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration
  @_Concurrency.MainActor(unsafe) public var showId: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var showStatus: BambuserLiveVideoShoppingPlayer.ShowStatus {
    get
  }
  @_Concurrency.MainActor(unsafe) public var playerState: BambuserLiveVideoShoppingPlayer.PlayerState {
    get
  }
  @_Concurrency.MainActor(unsafe) public var volume: Swift.Float {
    get
    set
  }
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView {
  @_Concurrency.MainActor(unsafe) public func invoke(_ function: BambuserLiveVideoShoppingPlayer.PlayerFunction, completion: @escaping BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView.PlayerFunctionCompletion)
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView {
  @_Concurrency.MainActor(unsafe) public var isPictureInPictureActive: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func enterPictureInPicture()
  @_Concurrency.MainActor(unsafe) public func exitPictureInPicture()
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView {
  @_Concurrency.MainActor(unsafe) public func loadShow()
  @_Concurrency.MainActor(unsafe) public func loadShow(_ showId: Swift.String)
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public protocol PictureInPictureRestoreComponent : AnyObject {
}
public protocol PictureInPictureCloseComponent : AnyObject {
}
extension UIKit.UIView : BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreComponent {
}
extension UIKit.UIViewController : BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreComponent {
}
extension UIKit.UIView : BambuserLiveVideoShoppingPlayer.PictureInPictureCloseComponent {
}
extension UIKit.UIViewController : BambuserLiveVideoShoppingPlayer.PictureInPictureCloseComponent {
}
extension BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreComponent {
  public func registerPictureInPictureRestoreAction(_ action: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureState.RestoreAction)
}
extension BambuserLiveVideoShoppingPlayer.PictureInPictureCloseComponent {
  public func registerPictureInPictureCloseAction(_ action: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureState.CloseAction)
}
@available(iOS 13.0, *)
public struct PictureInPictureRestoreModifier : SwiftUI.ViewModifier {
  public init(restoreAction: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreModifier.RestoreAction)
  public typealias RestoreAction = (BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayer, @escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s31BambuserLiveVideoShoppingPlayer09PictureInF15RestoreModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
public struct PictureInPictureCloseModifier : SwiftUI.ViewModifier {
  public init(closeAction: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureCloseModifier.CloseAction)
  public typealias CloseAction = () -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveVideoShoppingPlayer.PictureInPictureCloseModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s31BambuserLiveVideoShoppingPlayer09PictureInF13CloseModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
extension SwiftUI.View {
  public func pictureInPictureRestore(action: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureRestoreModifier.RestoreAction) -> some SwiftUI.View
  
  public func pictureInPictureClose(action: @escaping BambuserLiveVideoShoppingPlayer.PictureInPictureCloseModifier.CloseAction) -> some SwiftUI.View
  
}
public enum PlayerEvent : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case addProductToCart
  case addShowToCalendar
  case checkoutCart
  case hideCart
  case hideChatOverlay
  case hideProductList
  case pictureInPictureDidStop
  case pictureInPictureRestoreToFullscreen
  case playerDidBecomeReady
  case playerDidClose
  case playerDidLoad
  case playerDidSwipeDown
  case playerDidSwipeLeft
  case playerDidSwipeRight
  case playerDidSwipeUp
  case provideProductData
  case shareShow
  case showCart
  case showChatOverlay
  case showEmojiBatch
  case showProductList
  case showProductView
  case subscribe
  case syncCartState
  case unsubscribe
  case updateItemInCart
  case updateShowStatus
  case openExternalUrl
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerEvent]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerEvent] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct PlayerStreamerInfo : Swift.Codable, Swift.Equatable {
  public init(name: Swift.String? = nil, avatar: Swift.String? = nil)
  public let name: Swift.String?
  public let avatar: Swift.String?
  public static func == (a: BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo, b: BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo {
  public static let standard: BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo
}
public struct PlayerConfiguration {
  public init(engine: BambuserLiveVideoShoppingPlayer.PlayerEngine = .standard, audioConfig: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration = .standard, localeInfo: BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo = .standard, pipConfig: BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration = .standard, shareConfig: BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration = .standard, streamerInfo: BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo = .standard, uiConfig: BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration = .standard, eventHandler: @escaping BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EventHandler)
  public typealias EventHandler = (BambuserLiveVideoShoppingPlayer.PlayerEventInfo) -> Swift.Void
  public let audioConfig: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration
  public let engine: BambuserLiveVideoShoppingPlayer.PlayerEngine
  public let eventHandler: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EventHandler
  public let localeInfo: BambuserLiveVideoShoppingPlayer.PlayerLocaleInfo
  public let pipConfig: BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration
  public let shareConfig: BambuserLiveVideoShoppingPlayer.PlayerShareConfiguration
  public let streamerInfo: BambuserLiveVideoShoppingPlayer.PlayerStreamerInfo
  public let uiConfig: BambuserLiveVideoShoppingPlayer.PlayerUIConfiguration
}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration {
  public static func standard(eventHandler: @escaping BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EventHandler) -> BambuserLiveVideoShoppingPlayer.PlayerConfiguration
}
public protocol PictureInPictureController {
  var isPictureInPictureActive: Swift.Bool { get }
  func enterPictureInPicture()
  func exitPictureInPicture()
}
extension BambuserLiveVideoShoppingPlayer.PictureInPictureController {
  public func togglePictureInPicture()
}
public struct PictureInPictureConfiguration : Swift.Codable, Swift.Equatable {
  public init(isEnabled: Swift.Bool = true, isAutomatic: Swift.Bool = true)
  public let isAutomatic: Swift.Bool
  public let isEnabled: Swift.Bool
  public static func == (a: BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration, b: BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration {
  public static let standard: BambuserLiveVideoShoppingPlayer.PictureInPictureConfiguration
}
extension BambuserLiveVideoShoppingPlayer.PlayerEventInfo {
  public var calendarDateFormat: Swift.String {
    get
  }
  public var calendarDateFormatter: Foundation.DateFormatter {
    get
  }
  public var calendarEvent: BambuserLiveVideoShoppingPlayer.CalendarEvent? {
    get
  }
}
public struct PlayerEventInfo {
  public init(player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView, event: BambuserLiveVideoShoppingPlayer.PlayerEvent, data: [Swift.String : Any] = [:])
  public typealias Data = [Swift.String : Any]
  public static var aboutBlank: Swift.String
  public static var showIdPlaceholder: Swift.String
  public let player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView
  public let event: BambuserLiveVideoShoppingPlayer.PlayerEvent
  public let data: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Data
}
extension BambuserLiveVideoShoppingPlayer.PlayerEventInfo {
  public func url(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Foundation.URL?
  public func value(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Any?
  public func value<Value>(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Value?
}
extension BambuserLiveVideoShoppingPlayer.PlayerEventInfo {
  public enum Key {
    case duration
    case id
    case start
    case title
    case url
    case key(Swift.String)
  }
}
public enum ShowStatus : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case loading
  case startingSoon
  case playingRecorded
  case playingLive
  case pausedByHost
  case ended
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.ShowStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.ShowStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension BambuserLiveVideoShoppingPlayer.ShowStatus {
  public var isPlaying: Swift.Bool {
    get
  }
}
public enum PlayerState : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case idle
  case loaded
  case ready
  case closed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerState]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PictureInPictureState {
  public static var shared: BambuserLiveVideoShoppingPlayer.PictureInPictureState {
    get
  }
  public typealias RestoreAction = (BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView, @escaping () -> Swift.Void) -> Swift.Void
  public typealias CloseAction = () -> Swift.Void
  final public func reset()
  final public func resetRestoreAction()
  final public func resetCloseAction()
  final public var isPictureInPictureActive: Swift.Bool {
    get
  }
  final public func restorePlayer()
  @objc deinit
}
@available(iOS 13.0, *)
public struct LiveVideoShoppingPlayer : SwiftUI.View {
  public init(showId: Swift.String, configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration, context: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext = .shared)
  public init(player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerView, context: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext = .shared)
  public let showId: Swift.String
  public let configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration
  public let context: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s31BambuserLiveVideoShoppingPlayer0bcdE0V4bodyQrvp", 0) __
}
extension BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerOverlayVisiblity : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEnabledState : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEnabledState : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEvent : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEvent : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.ShowStatus : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.ShowStatus : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerState : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerState : Swift.RawRepresentable {}
